# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Copyright 2019 Google LLC. This software is provided as-is,
# without warranty or representation for any use or purpose.
#


timeout: 3600s
steps:
  - name: gcr.io/cloud-builders/gsutil
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gsutil cp -DD "gs://${PROJECT_ID}_build/repo/keys/id_rsa_${PROJECT_ID}-repo" '/builder/home/.ssh/id_rsa'
        gsutil cp -DD "gs://${PROJECT_ID}_build/repo/github/build-ssh-config-git-hub" '/builder/home/.ssh/config'
        gsutil cp -DD "gs://${PROJECT_ID}_build/billing/billing_acount_testing.txt" '/builder/home/.ssh/billing_acount_testing.txt'

  - name: 'gcr.io/cloud-builders/git'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        cp /builder/home/.ssh/id_rsa /root/.ssh/id_rsa
        cp /builder/home/.ssh/config /root/.ssh/config
        chmod 400 /root/.ssh/id_rsa
        git clone git@github.com:GoogleCloudPlatform/anthos-appconfig.git build-source
    volumes:
      - name: 'ssh'
        path: /root/.ssh
  - name: 'gcr.io/cloud-builders/git'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        [ "$_REF_PATH" == '*BRANCH*' ] && MY_CHECKOUT_REF="$BRANCH_NAME";MY_APP_VERSION="b-$BRANCH_NAME"
        [ "$_REF_PATH" == '*BRANCH-MANUAL*' ] && MY_CHECKOUT_REF="$_BRANCH_NAME";MY_APP_VERSION="b-$_BRANCH_NAME"
        [ "$_REF_PATH" == '*SHA-MANUAL-BR*' ] && MY_CHECKOUT_REF="$_INPUT_SHA_LONG";MY_APP_VERSION="b-$_BRANCH_NAME"
        [ "$_REF_PATH" == 'SHA_MANUAL_RELEASE' ] && MY_CHECKOUT_REF="$_INPUT_SHA_LONG";MY_APP_VERSION="$_POTENTIAL_VERSION"
        mkdir -p  /workspace/myenv/tests
        echo "$$MY_APP_VERSION" > /workspace/myenv/_fileappversion_TAG.out
        git pull

        git checkout $$MY_CHECKOUT_REF
        echo "GIT Info"


        echo $(git rev-parse --verify HEAD) > /workspace/myenv/_fileappsha1_long_TAG.out
        PARM_BUILD_SHA_LONG="$(cat /workspace/myenv/_fileappsha1_long_TAG.out)"
        echo $(git rev-parse --short $${PARM_BUILD_SHA_LONG}) > /workspace/myenv/_fileappsha1_TAG.out
        PARM_BUILD_SHA="$(cat /workspace/myenv/_fileappsha1_TAG.out)"
        echo "Build-Info:[$${MY_CHECKOUT_REF}}]-[$${PARM_BUILD_SHA}]-[$${PARM_BUILD_SHA_LONG}]"
        git status
        echo "Build-Info:[$${MY_CHECKOUT_REF}}]-[$${PARM_BUILD_SHA}]-[$${PARM_BUILD_SHA_LONG}]"


    dir: "build-source"
    volumes:
      - name: 'ssh'
        path: /root/.ssh
  - name: 'gcr.io/cloud-builders/git'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        date "+%Y%m%d-%H%M%S" > /workspace/myenv/_fileat_TAG.out
        echo "20190712000300" > /workspace/myenv/_file_TAG.out
        echo "201907120003" > /workspace/myenv/_filemin_TAG.out
        echo "tst-appconfig-$(cat /workspace/myenv/_filemin_TAG.out)" > /workspace/myenv/_fileproj_TAG.out
        echo "test-1" > /workspace/myenv/_fileclus_TAG.out
        echo "us-west1" > /workspace/myenv/_filereg_TAG.out
        echo "us-west1-b" > /workspace/myenv/_filezone_TAG.out
        cp _fileat_TAG.out /workspace/myenv/_filerepopath_TAG.out
        echo "repo8" > /workspace/myenv/_filerepo_TAG.out

        PARM_PROJ="$(cat /workspace/myenv/_fileproj_TAG.out)"
        PARM_BUILD_BRANCH="$(cat /workspace/myenv/_fileappversion_TAG.out)"

        bash setup/setup_mapping_execution.sh

        PARM_PROJ="$(cat /workspace/myenv/_fileproj_TAG.out)"
        PARM_BUILD_BRANCH="$(cat /workspace/myenv/_fileappversion_TAG.out)"

        mkdir -p /root/home/.private/gsa_keys
        gsutil cp  "gs://anthos-appconfig_build/tests/gsa_keys/$${PARM_PROJ}/*" /root/home/.private/gsa_keys




    dir: "build-source/tests"
  - name: google/cloud-sdk
    entrypoint: "bash"
    args:
    - '-c'
    - |
      set -x
      [[ "$_STEPS_X" == *"CLUSTER1"* ]] && exit 0
      
      PARM_TS_SEC=$(cat /workspace/myenv/_file_TAG.out)
      PARM_TS_MIN=$(cat /workspace/myenv/_filemin_TAG.out)
      PARM_PROJ="$(cat /workspace/myenv/_fileproj_TAG.out)"
      PARM_CLUSTER=$(cat /workspace/myenv/_fileclus_TAG.out)
      PARM_REGION=$(cat /workspace/myenv/_filereg_TAG.out)
      PARM_ZONE=$(cat /workspace/myenv/_filezone_TAG.out)
      PARM_REPO=$(cat /workspace/myenv//_filerepo_TAG.out)
      PARM_REPO_LOCAL_PATH=$(cat /workspace/myenv/_filerepopath_TAG.out)
      PARM_BUILD_BRANCH="$(cat /workspace/myenv/_fileappversion_TAG.out)"


      gcloud config list  --quiet
      gcloud projects create --folder=611791615006 --name="$$PARM_PROJ" --quiet  || echo 0
      gcloud services enable cloudbilling.googleapis.com --project "$$PARM_PROJ" --quiet
      gcloud beta billing projects link tst-appconfig-$(cat _filemin_TAG.out) --billing-account="$(cat /builder/home/.ssh/billing_acount_testing.txt)" --quiet
      gcloud services enable compute.googleapis.com --project "$$PARM_PROJ" --quiet
      gcloud services enable container.googleapis.com  --project "$$PARM_PROJ" --quiet
      gcloud services enable sourcerepo.googleapis.com --project "$$PARM_PROJ" --quiet
      gcloud services enable monitoring.googleapis.com --project "$$PARM_PROJ" --quiet
      gcloud services enable logging.googleapis.com --project "$$PARM_PROJ" --quiet

      echo $(gcloud beta compute routers create r"$$PARM_REGION" --network=default --region "$$PARM_REGION" --project "$$PARM_PROJ" || echo 0)
      echo $(gcloud beta compute routers nats create "n$$PARM_REGION" --router "r$$PARM_REGION" --project "$$PARM_PROJ" --auto-allocate-nat-external-ips --nat-all-subnet-ip-ranges --router-region "$$PARM_REGION" || echo 0)
      echo $(gcloud container clusters describe $$PARM_CLUSTER --zone $$PARM_ZONE --format="value(selfLink.basename())" --project "$$PARM_PROJ" || echo "") > out_cluster_TAG.out
      echo "CLUS-$(cat out_cluster_TAG.out)"
      [  ! -z  "$(cat out_cluster_TAG.out)" ] ||  gcloud beta container --project "$$PARM_PROJ" \
          clusters create "$$PARM_CLUSTER" \
          --disk-size "500" \
          --disk-type "pd-standard" \
          --enable-autorepair \
          --enable-cloud-logging \
          --enable-cloud-monitoring \
          --enable-ip-alias \
          --enable-master-authorized-networks \
          --enable-network-policy \
          --enable-private-nodes \
          --enable-stackdriver-kubernetes \
          --image-type "COS" \
          --machine-type "n1-standard-4" \
          --master-ipv4-cidr "172.28.0.0/28" \
          --metadata disable-legacy-endpoints=true \
          --no-enable-autoupgrade \
          --no-enable-basic-auth \
          --no-issue-client-certificate \
          --num-nodes "3" \
          --network "projects/$$PARM_PROJ/global/networks/default" \
          --subnetwork "projects/$$PARM_PROJ/regions/$$PARM_REGION/subnetworks/default" \
          --zone "$$PARM_ZONE"

      echo $(gcloud container clusters describe "$$PARM_CLUSTER" --zone "$$PARM_ZONE" --format="value(selfLink.basename())" --project "$$PARM_PROJ"  || echo "") > out2_cluster_TAG.out
      echo "CLUS2-$(cat out2_cluster_TAG.out)"

      gcloud container clusters update "$$PARM_CLUSTER"  --zone "$$PARM_ZONE" \
        --enable-master-authorized-networks \
        --master-authorized-networks 0.0.0.0/0 --zone "$$PARM_ZONE" --project "$$PARM_PROJ"


      rm -f ./kubeconfig
      touch ./kubeconfig

      gcloud container clusters get-credentials "$$PARM_CLUSTER" --zone "$$PARM_ZONE"  --project "$$PARM_PROJ"

      [ ! -z  "$(kubectl get clusterrolebinding cluster-admin-binding --output 'jsonpath={.metadata.name}')" ] || kubectl \
        create clusterrolebinding cluster-admin-binding \
        --clusterrole cluster-admin \
        --user $(gcloud config get-value core/account)


    dir: "build-source/tests/setup"
  - name: google/cloud-sdk
    entrypoint: "bash"
    args:
      - '-c'
      - |
        set -x
        [[ "$_STEPS_X" == *"CRD1"* ]] && exit 0

        PARM_AT_SEC=$(cat /workspace/myenv/_fileat_TAG.out)
        PARM_TS_SEC=$(cat /workspace/myenv/_file_TAG.out)
        PARM_TS_MIN=$(cat /workspace/myenv/_filemin_TAG.out)
        PARM_PROJ="$(cat /workspace/myenv/_fileproj_TAG.out)"
        PARM_CLUSTER=$(cat /workspace/myenv/_fileclus_TAG.out)
        PARM_REGION=$(cat /workspace/myenv/_filereg_TAG.out)
        PARM_ZONE=$(cat /workspace/myenv/_filezone_TAG.out)
        PARM_REPO=$(cat /workspace/myenv/_filerepo_TAG.out)
        PARM_REPO_LOCAL_PATH=$(cat /workspace/myenv/_filerepopath_TAG.out)
        PARM_BUILD_BRANCH="$(cat /workspace/myenv/_fileappversion_TAG.out)"

        echo $(gcloud source repos describe "$$PARM_REPO" --format="value(selfLink.basename())" --project "$$PARM_PROJ" || echo "") > out_repos_TAG.out
        echo "REPO-$(cat out_repo_TAG.out)"

        [ ! -z  "$(cat out_repos_TAG.out)" ] || gcloud source repos create "$$PARM_REPO" --project "$$PARM_PROJ"


        gcloud source repos clone  $$PARM_REPO "$$PARM_REPO_LOCAL_PATH/$$PARM_REPO" --project "$$PARM_PROJ"
        curl -Lo acm-init.sh \
           https://storage.googleapis.com/anthos-appconfig_public/install/scripts/acm-init.sh
        chmod a+x acm-init.sh
        curl -Lo crd-setup-helper.sh \
           https://storage.googleapis.com/anthos-appconfig_public/install/scripts/crd-setup-helper.sh
        chmod a+x crd-setup-helper.sh
        rm -f ./kubeconfig
        touch ./kubeconfig

        gcloud container clusters get-credentials "$$PARM_CLUSTER" \
          --zone "$$PARM_ZONE" \
          --project "$$PARM_PROJ"

        kubectl get nodes

        # Install column
        apt-get install bsdmainutils -y

        git config --global user.email $(gcloud config get-value core/account 2> /dev/null)
        git config --global user.name  $(gcloud config get-value core/account 2> /dev/null)

        export PROJECT_NAME="$$PARM_PROJ"; export RELEASE_NAME=$$PARM_BUILD_BRANCH; echo "y\nyyyy" | ./crd-setup-helper.sh install -f

        # TODO - Check for Istio Install
        # kubectl get deployment  -o yaml -n istio-system | grep image:

        gsutil cp gs://${PROJECT_ID}_build/repo/keys/id_rsa_test* .
        gsutil cp gs://${PROJECT_ID}_build/repo/gcloud_user.txt .
        cp ./id_rsa_test* /root/.ssh/

        export PROJECT_NAME="$$PARM_PROJ"; export RELEASE_NAME=$$PARM_BUILD_BRANCH; echo "yy" | ./crd-setup-helper.sh init-repo "$$PARM_REPO_LOCAL_PATH/$$PARM_REPO" "$(cat gcloud_user.txt)"

        [ ! -z  "$(kubectl get secrets -n=config-management-system git-creds --output 'jsonpath={.metadata.name}')" ] || kubectl \
          create secret generic -n=config-management-system git-creds \
          --from-file=ssh=/root/.ssh/id_rsa_test

        export PROJECT_NAME="$$PARM_PROJ"; export RELEASE_NAME=$$PARM_BUILD_BRANCH; yes | bash acm-init.sh status
        export PROJECT_NAME="$$PARM_PROJ"; export RELEASE_NAME=$$PARM_BUILD_BRANCH;  echo -e "y\n" | ./crd-setup-helper.sh init-demos "$$PARM_REPO_LOCAL_PATH/$$PARM_REPO" "$(cat gcloud_user.txt)"


        echo "Done"

    dir: "build-source/tests"
  - name: google/cloud-sdk
    entrypoint: "bash"
    args:
      - '-c'
      - |
        set -x
        [[ "$_STEPS_X" == *"CRD1"* ]] && exit 0

        PARM_TS_SEC=$(cat /workspace/myenv/_file_TAG.out)
        PARM_TS_MIN=$(cat /workspace/myenv/_filemin_TAG.out)
        PARM_PROJ="$(cat /workspace/myenv/_fileproj_TAG.out)"
        PARM_CLUSTER=$(cat /workspace/myenv/_fileclus_TAG.out)
        PARM_REGION=$(cat /workspace/myenv/_filereg_TAG.out)
        PARM_ZONE=$(cat /workspace/myenv/_filezone_TAG.out)
        PARM_REPO=$(cat /workspace/myenv/_filerepo_TAG.out)
        PARM_REPO_LOCAL_PATH=$(cat /workspace/myenv/_filerepopath_TAG.out)
        PARM_BUILD_BRANCH="$(cat /workspace/myenv/_fileappversion_TAG.out)"

        CHECK_SA1=$(gcloud iam service-accounts describe appconfigcrd-demo-sa1  --project $${PARM_PROJ}  --format="value(selfLink.basename())"   || echo "")
        [ -z  $$CHECK_SA1 ] || gcloud iam service-accounts create appconfigcrd-demo-sa1 --display-name=appconfigcrd-demo-sa1 --project --project $${PARM_PROJ}

        CHECK_SA2=$(gcloud iam service-accounts describe appconfigcrd-demo-sa2  --project $${PARM_PROJ}  --format="value(selfLink.basename())"   || echo "")
        [ -z  $$CHECK_SA2 ] || gcloud iam service-accounts create appconfigcrd-demo-sa2 --display-name=appconfigcrd-demo-sa2 --project --project $${PARM_PROJ}


        gcloud beta pubsub topics add-iam-policy-binding appconfigcrd-demo-topic1 --project $${PARM_PROJ}  \
          --member=serviceAccount:appconfigcrd-demo-sa1@$${PARM_PROJ}.iam.gserviceaccount.com \
          --role=roles/pubsub.publisher
        gcloud beta pubsub topics add-iam-policy-binding appconfigcrd-demo-topic2 --project $${PARM_PROJ}  \
          --member=serviceAccount:appconfigcrd-demo-sa2@$${PARM_PROJ}.iam.gserviceaccount.com \
          --role=roles/pubsub.publisher



        kubectl create secret generic appconfigcrd-demo-sa1-secret \
          -n appconfigmgrv2-system \
          --from-file=key.json=/root/home/.private/gsa_keys/sa1.json
        kubectl create secret generic appconfigcrd-demo-sa2-secret \
          -n appconfigmgrv2-system \
          --from-file=key.json=/root/home/.private/gsa_keys/sa2.json

        PARM_PATH="gs://anthos-appconfig_public/deploy/$${PARM_BUILD_BRANCH}/examples/use-cases"
        gsutil cat  "$$PARM_PATH/uc-allowed-services-k8s/deploy-apps.yaml" | kubectl delete -f -
        gsutil cat  "$$PARM_PATH/uc-allowed-services-istio/deploy-apps.yaml" | kubectl delete -f -
        gsutil cat  "$$PARM_PATH/uc-allowed-jwt-istio/deploy-apps.yaml" | kubectl delete -f -
        gsutil cat  "$$PARM_PATH/uc-secrets-k8s/deploy-apps.yaml" | kubectl delete -f -
        gsutil cat  "$$PARM_PATH/uc-secrets-istio/deploy-apps.yaml" | kubectl delete -f -
        gsutil cat  "$$PARM_PATH/uc-firebase/deploy-apps.yaml" | kubectl delete -f -

        sleep 30

        gsutil cat  "$$PARM_PATH/uc-allowed-services-k8s/deploy-apps.yaml" | kubectl apply -f -
        gsutil cat  "$$PARM_PATH/uc-allowed-services-istio/deploy-apps.yaml" | kubectl apply -f -
        gsutil cat  "$$PARM_PATH/uc-allowed-jwt-istio/deploy-apps.yaml" | kubectl apply -f -
        gsutil cat  "$$PARM_PATH/uc-secrets-k8s/deploy-apps.yaml" | kubectl apply -f -
        gsutil cat  "$$PARM_PATH/uc-secrets-istio/deploy-apps.yaml" | kubectl apply -f -
        gsutil cat  "$$PARM_PATH/uc-firebase/deploy-apps.yaml" | kubectl apply -f -

        echo "CRD1-avoid last statment error"

    dir: "build-source/tests"
  - name: google/cloud-sdk
    entrypoint: "bash"
    args:
      - '-c'
      - |
        set -x
        PARM_TS_SEC=$(cat /workspace/myenv/_file_TAG.out)
        PARM_TS_MIN=$(cat /workspace/myenv/_filemin_TAG.out)
        PARM_PROJ="$(cat /workspace/myenv/_fileproj_TAG.out)"
        PARM_CLUSTER=$(cat /workspace/myenv/_fileclus_TAG.out)
        PARM_REGION=$(cat /workspace/myenv/_filereg_TAG.out)
        PARM_ZONE=$(cat /workspace/myenv/_filezone_TAG.out)
        PARM_REPO=$(cat /workspace/myenv/_filerepo_TAG.out)
        PARM_REPO_LOCAL_PATH=$(cat /workspace/myenv/_filerepopath_TAG.out)
        PARM_BUILD_BRANCH="$(cat /workspace/myenv/_fileappversion_TAG.out)"

        export KUBECONFIG=$(pwd)/kc

        rm -f $$KUBECONFIG || touch $$KUBECONFIG

        gcloud container clusters get-credentials "$$PARM_CLUSTER" \
          --zone "$$PARM_ZONE" \
          --project "$$PARM_PROJ"

        kubectl config get-context
        export INGRESS_ISTIO_HOST=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        export INGRESS_NO_ISTIO_HOST=$(kubectl -n devtest get service test-service-external -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        echo $$INGRESS_ISTIO_HOST > /workspace/myenv/_fileout_test_istio_host.out
        echo $$INGRESS_NO_ISTIO_HOST > /workspace/myenv/_fileout_test_istio_no_host.out
    dir: "build-source/tests"
  - name: gcr.io/anthos-appconfig/pso-e2e-testing-py:v1.0.1
    entrypoint: "bash"
    args:
      - '-c'
      - |
        set -x
        [[ "$_STEPS_X" == *"TEST1"* ]] && exit 0
        PARM_TS_SEC=$(cat /workspace/myenv/_file_TAG.out)
        PARM_TS_MIN=$(cat /workspace/myenv/_filemin_TAG.out)
        PARM_PROJ="$(cat /workspace/myenv/_fileproj_TAG.out)"
        PARM_CLUSTER=$(cat /workspace/myenv/_fileclus_TAG.out)
        PARM_REGION=$(cat /workspace/myenv/_filereg_TAG.out)
        PARM_ZONE=$(cat /workspace/myenv/_filezone_TAG.out)
        PARM_REPO=$(cat /workspace/myenv/_filerepo_TAG.out)
        PARM_REPO_LOCAL_PATH=$(cat /workspace/myenv/_filerepopath_TAG.out)
        PARM_BUILD_BRANCH="$(cat /workspace/myenv/_fileappversion_TAG.out)"

        export INGRESS_ISTIO_HOST=$(cat /workspace/myenv/_fileout_test_istio_host.out)
        export INGRESS_NO_ISTIO_HOST=$(cat /workspace/myenv/_fileout_test_istio_no_host.out)
        echo $(pwd)
        ls -l

        export GOOGLE_APPLICATION_CREDENTIALS=/root/home/.private/gsa_keys/sa1.json
        export PUBSUB_GCP_PROJECT=$${PARM_PROJ}
        python all_tests.py;  TEST_RESULTS_ALL_1=$? || echo "0"
        echo $$TEST_RESULTS_ALL_1 > /workspace/myenv/tests/_filetest-results-all-1_TAG.out

    dir: "build-source/tests/artifacts/drivers/simple_hello"
  - name: google/cloud-sdk
    entrypoint: "bash"
    args:
      - '-c'
      - |
        set -x
        PARM_AT_SEC=$(cat /workspace/myenv/_fileat_TAG.out)
        PARM_TS_SEC=$(cat /workspace/myenv/_file_TAG.out)
        PARM_TS_MIN=$(cat /workspace/myenv/_filemin_TAG.out)
        PARM_PROJ="$(cat /workspace/myenv/_fileproj_TAG.out)"
        PARM_CLUSTER=$(cat /workspace/myenv/_fileclus_TAG.out)
        PARM_REGION=$(cat /workspace/myenv/_filereg_TAG.out)
        PARM_ZONE=$(cat /workspace/myenv/_filezone_TAG.out)
        PARM_REPO=$(cat /workspace/myenv/_filerepo_TAG.out)
        PARM_REPO_LOCAL_PATH=$(cat /workspace/myenv/_filerepopath_TAG.out)
        PARM_BUILD_BRANCH="$(cat /workspace/myenv/_fileappversion_TAG.out)"
        PARM_BUILD_SHA="$(cat /workspace/myenv/_fileappsha1_TAG.out)"
        PARM_BUILD_SHA_LONG="$(cat /workspace/myenv/_fileappsha1_long_TAG.out)"
        TEST_RESULTS_ALL_1=$(cat /workspace/myenv/tests/_filetest-results-all-1_TAG.out)

        TEST_RESULTS_DIR='fail'

        echo "TEST_RESULTS_ALL_1-$$TEST_RESULTS_ALL_1"
        if [ "$$TEST_RESULTS_ALL_1" == "0" ]; then
          TEST_RESULTS_DIR='pass'
        fi
        echo -e "AppVersion:[$$PARM_BUILD_BRANCH]\n" > /workspace/myenv/tests/build_info.txt
        echo; for v in PARM_BUILD_BRANCH PARM_BUILD_SHA PARM_BUILD_SHA_LONG PARM_AT_SEC PARM_PROJ K8S_CONTEXT PARM_CLUSTER PARM_REGION PARM_ZONE ; do
          echo -e "${v}[${!v}]\n"  >> /workspace/myenv/tests/build_info.txt
        done



        TEST_RESULTS_FULL_DIR="gs://${PROJECT_ID}_build_reports/build_test/$${PARM_BUILD_BRANCH}/$${TEST_RESULTS_DIR}/$${PARM_AT_SEC}-sha-$${PARM_BUILD_SHA}"
        gsutil cp '/workspace/myenv/tests/build_info.txt' "$${TEST_RESULTS_FULL_DIR}/app_version.txt"
        gsutil cp  -R "../tests/artifacts/drivers/simple_hello/reports/temp/*" "$${TEST_RESULTS_FULL_DIR}/reports/"

        exit $$TEST_RESULTS_ALL_1
    dir: "build-source/tests"
